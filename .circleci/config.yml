version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys: 
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run: 
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run: 
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - run: 
          name: run tests
          command: |
            . venv/bin/activate
            make test
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies{{ checksum "requirements.txt" }}
  dockerize-app:
    machine: true
    steps:
      - checkout
      - run:
        command: |
          ./upload_docker.sh ${DOCKER_USER} ${DOCKER_PASS} ${DOCKER_TAG}
  
  create-cluster:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           rm-capstone
         type: string
     steps:
       - checkout
       - aws-eks/install-aws-iam-authenticator:
           release-tag: ''
       - run:
           name: Install the eksctl tool
           command: |
             if which eksctl > /dev/null; then
             echo "eksctl is already installed"
             exit 0
             fi
             mkdir -p eksctl_download
             curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
             chmod +x eksctl_download/eksctl
             SUDO=""
             if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
             SUDO="sudo"
             fi
             $SUDO mv eksctl_download/eksctl /usr/local/bin/
             rmdir eksctl_download
       - aws-eks/create-cluster:
           cluster-name: << parameters.cluster-name >>
           skip-kubectl-install: false
           verbose: 3
           node-type: t2.micro
           nodes-max: 2
           ssh-access: false
           ssh-public-key: ''
  
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacity-capstone-deployment
workflows:
  default:
    jobs:
      - build
      - create-cluster:
          cluster-name: udacity-capstone
          requires:
            - build
      - test-cluster:
          cluster-name: udacity-capstone
          requires:
            - create-cluster
      - dockerize-app:
        requires:
          - test-cluster
      - create-deployment:
          cluster-name: udacity-capstone
          requires:
            - test-cluster
      
      - aws-eks/update-container-image:
          cluster-name: udacity-capstone
          container-image-updates: 'udacity-capstone=karnold20/udacity-capstone:${DOCKER_TAG}'
          post-steps:
            - kubernetes/delete-resource:
                resource-names: udacity-capstone-deployment
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
            - dockerize-app
          resource-name: deployment/nginx-deployment